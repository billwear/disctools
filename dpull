#!/usr/bin/python3

import sys, json, subprocess, os
from yaml import load, dump

try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

def get_topic(config_data, topic):
    rate_limit_error = True
    while rate_limit_error == True:
        proc = subprocess.Popen(
            [
                "curl",
                "-s",
                "-X",
                "GET",
                "-H",
                "Api-Key: " + config_data["api_key"],
                "-H",
                "Api-Username: " + config_data["api_username"],
                "-H",
                "Content-Type: application/json",
                config_data["base_url"] + "/t/{" + str(topic) + "}.json",
            ],
            stdout=subprocess.PIPE,
        )
        
        # read the result into a usable buffer
        output = proc.stdout.read()
        
        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)
        try:
            if topic_json["error_type"] == "rate_limit":
                wait_time = topic_json["extras"]["wait_seconds"]
                print("waiting for rate limit to pass")
                rate_limit_error = True
                time.sleep(wait_time + 5)
        except:
            return topic_json

def get_post(config_data, post_id):
    rate_limit_error = True
    while rate_limit_error == True:
        proc = subprocess.Popen(
            [
                "curl",
                "-s",
                "-X",
                "GET",
                "-H",
                "Api-Key: " + config_data["api_key"],
                "-H",
                "Api-Username: " + config_data["api_username"],
                "-H",
                "Content-Type: application/json",
                config_data["base_url"] + "/posts/{" + str(post_id) + "}.json",
            ],
            stdout=subprocess.PIPE,
        )
        
        # read the result into a usable buffer
        output = proc.stdout.read()
        
        # convert the result to json
        try:
            post_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)
        try:
            if post_json["error_type"] == "rate_limit":
                wait_time = post_json["extras"]["wait_seconds"]
                print("waiting for rate limit to pass")
                rate_limit_error = True
                time.sleep(wait_time + 5)
        except:
            return post_json

def print_usage():
    print("usage: dpull -n topic_number -t")

title_only = 0

if len(sys.argv) < 3:
    print_usage()
    sys.exit()

if sys.argv[1] != "-n":
    print_usage()
    sys.exit()
    
topic_number = sys.argv[2]

if len(sys.argv) == 4:
    if sys.argv[3] == "-t":
        title_only = 1

# read config file to get api-key, api-usr, and discourse url
try:
    cfile = open("/home/stormrider/.config/rad/dc.yaml", "r")
except:
    print("dpull: cannot open configuration file")
    print("dpull: exiting")
    sys.exit(4)
config_data = load(cfile, Loader=Loader)
cfile.close()

# get the JSON data from the API, with rate limit management
topic_json = get_topic(config_data, topic_number)

# if we just want the title, just return that
if title_only == 1:
    fancy_title = topic_json["fancy_title"]
    print(fancy_title)
    sys.exit(0)

# extract the post ID from the topic json 
try:
    post_id = topic_json["post_stream"]["posts"][0]["id"]
except:
    print(topic_json)
    print('xpub: error trying to read post_id, point 3')
    print("error type should be:",topic_json["error_type"])
    print("xpub: exiting")
    sys.exit(551)

# read the post using the api, handling rate_limit events
post_json = get_post(config_data, post_id)
        
# extract the article markdown from the json output
raw = post_json["raw"]

# write the article markdown to stdout
sys.stdout.write(raw)



