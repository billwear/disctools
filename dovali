#!/bin/bash
# 

usage() {
    echo "Usage: dovali -m <filename> -v <html_version> -b <branch> [options]"
    echo
    echo "Options:"
    echo "  -h                    Show this help message and exit"
    echo "  -m MARKDOWN_FILENAME  Markdown filename with extension"
    echo "  -v MAAS_VERSION       MAAS version to publish as HTML, e.g., 3.4"
    echo "  -b MAAS_BRANCH        Git branch to update"
    echo "  -s                    Use the last staged version of the document"
    echo "  -d                    Don't publish the document"
    echo "  -H                    Just generate HTML, skip all other steps for now"
    echo "  -R REPO_ROOT          Repo root directory (default ~/src/maas-doc)"
    echo "  -B BENCH_PATH         Path to temporary workbench (default /tmp/bench)"
    echo "  -S STAGING_PATH       Path to temporary staging area (default /tmp/staging)"
    echo "  -G GALLEY_TOPIC       Discourse galley proof topic number (default 4917)"
    exit 1
}

maas_version="3.3"
repo_root="/home/stormrider/src/maas-doc"
bench_path="/tmp/bench"
staging_path="/tmp/staging"
galley_topic="4917"
rescue_staged=false
dont_publish=false
skip_to_html=false

while getopts hm:v:b:sdHR:B:S:G: flag; do
    case "$flag" in
	h) usage ;;
	m) markdown_file=$OPTARG ;;
	v) maas_version=$OPTARG ;;
	b) maas_branch=$OPTARG ;;
        s) rescue_staged=true ;;
	d) dont_publish=true ;;
	H) skip_to_html=true ;;
	R) repo_root=$OPTARG ;;
	B) bench_path=$OPTARG ;;
	S) staging_path=$OPTARG ;;
	G) galley_topic=$OPTARG ;;
    esac
done

repo_path="$repo_root/$maas_branch"
markdown_path="$repo_path/src"
fq_markdown_path="$markdown_path/$markdown_file"

if $skip_to_html ; then
    echo "skipping staged files for html fastrack"
else
    if $rescue_staged ; then
	echo "substituting previously staged file for git original"
	fq_markdown_path="$staging_path/$markdown_file"
    fi
fi

html_filename="${markdown_file%-[0-9]*.*}.html"
discourse_topic_number=$(echo $markdown_file | sed -E 's/.*-([0-9]*).md/\1/')

if [ $html_filename == "maas-documentation.html" ]
then
    html_filename="maas-documentation-25.html"
fi
sedcmd="s/zork/$html_filename/g"
discourse_file="${markdown_file%.*}.discmd"

mkdir -p $bench_path
rm -rf $bench_path/*

dpull -n $discourse_topic_number > $bench_path/$discourse_file
cp $fq_markdown_path $bench_path/

if $skip_to_html ; then
    echo "skipping markdown commit for html fastrack"
else
    if $rescue_staged ; then
	cp "$staging_path/markdown/$markdown_file" $bench_path/
    fi

    echo "$repo_path"
    cp $bench_path/$discourse_file $repo_path/src/$markdown_file
    cd $repo_path
    git add .
    git commit -m "Updated $markdown_file to current discourse version"
    git push

    diff $bench_path/$markdown_file $bench_path/$discourse_file > $bench_path/md_diff

    emacs -q -l /home/stormrider/.emacs2 $bench_path/$discourse_file $bench_path/$markdown_file $bench_path/md_diff

    read -e -p "Stage changes for review? [Y/n] " YN
    [[ $YN == "n" || $YN == "N" || $YN == "" ]] && exit
    cat $bench_path/$markdown_file \
	| tee $staging_path/markdown/$markdown_file \
	| dpush -n $galley_topic
fi

mkdir -p $staging_path/production-html-{deb,snap}/{cli,ui}/css
mkdir -p $staging_path/production-html-{deb,snap}/css
cp $repo_path/html-support/css/stylesheet.css \
   $staging_path/production-html-deb/cli/css/
cp $repo_path/html-support/css/stylesheet.css \
   $staging_path/production-html-deb/ui/css/
cp $repo_path/html-support/css/stylesheet.css \
   $staging_path/production-html-deb/css/
mkdir -p $staging_path/production-html-deb/images
cp $repo_path/html-support/css/stylesheet.css \
   $staging_path/production-html-snap/cli/css/
cp $repo_path/html-support/css/stylesheet.css \
   $staging_path/production-html-snap/ui/css/
cp $repo_path/html-support/css/stylesheet.css \
   $staging_path/production-html-snap/css/
mkdir -p $staging_path/production-html-snap/images

read firstline<$bench_path/$markdown_file
html_title=$(sed -e's/^[^"]*\"\([^"]*\).*$/\1/g' <<< $firstline)

# assemble and copy html templates to staging area
mkdir -p $staging_path/templates
dest_template=$staging_path/templates
src_template=$repo_path/html-support/templates/$maas_version

cat "$src_template/header-template.html" \
    "$src_template/outer-switch-template.html" \
    "$src_template/outer-body-template.html" \
    "$src_template/footer-template.html" \
    > $dest_template/outer-template.html

cat "$src_template/header-template.html" \
    "$src_template/ui-switch-template.html" \
    "$src_template/inner-body-template.html" \
    "$src_template/footer-template.html" \
    > $dest_template/ui-template.html

cat "$src_template/header-template.html" \
    "$src_template/cli-switch-template.html" \
    "$src_template/inner-body-template.html" \
    "$src_template/footer-template.html" \
    > $dest_template/cli-template.html

tab2html "v$maas_version Snap" "UI" "$html_title" \
	 -i $bench_path/$markdown_file \
	 -lllll \
	 -L /tmp/tab2html.log \
	 -o $staging_path/production-html-snap/ui/$html_filename \
	 -t $dest_template/ui-template.html
sed -i -e"$sedcmd" $staging_path/production-html-snap/ui/$html_filename

tab2html "v$maas_version Packages" "UI" "$html_title" -s \
	 -i $bench_path/$markdown_file \
	 -lllll \
	 -L $/tmp/tab2html.log \
	 -o $staging_path/production-html-deb/ui/$html_filename \
	 -t $dest_template/ui-template.html
sed -i -e"$sedcmd" $staging_path/production-html-deb/ui/$html_filename

tab2html "v$maas_version Snap" "CLI" "$html_title" -s \
	 -i $bench_path/$markdown_file \
	 -lllll \
	 -L $/tmp/tab2html.log \
	 -o $staging_path/production-html-snap/cli/$html_filename \
	 -t $dest_template/cli-template.html
sed -i -e"$sedcmd" $staging_path/production-html-snap/cli/$html_filename

tab2html "v$maas_version Packages" "CLI" "$html_title" -s \
	 -i $bench_path/$markdown_file \
	 -lllll \
	 -L $/tmp/tab2html.log \
	 -o $staging_path/production-html-deb/cli/$html_filename \
	 -t $dest_template/cli-template.html
sed -i -e"$sedcmd" $staging_path/production-html-deb/cli/$html_filename

cp /tmp/images/* $staging_path/production-html-snap/images
cp /tmp/images/* $staging_path/production-html-deb/images

if $skip_to_html ; then
    echo "skip uploading discourse changes for html fastrack"
else
    if $dont_publish ; then
	echo "NOT publishing these results to discourse"
    else
	read -e -p "Upload changes to discourse and HTML docs? [Y/n] " YN
	[[ $YN == "n" || $YN == "N" || $YN == "" ]] && exit
	cp $bench_path/$markdown_file $fq_markdown_path
	cat $fq_markdown_path | dpush -n $discourse_topic_number
    fi
    echo "$repo_path/production-html-snap"
fi

cp -R $staging_path/production-html-snap/* $repo_path/production-html-snap
cp -R $staging_path/production-html-deb/* $repo_path/production-html-deb

if $skip_to_html ; then
    echo "auto-commit message for html fastrack"
    commit_message="regenerating HTML version"
else    
    read -e -p "Stage all changes and commit/push git repo? [Y/n] " YN
    [[ $YN == "n" || $YN == "N" || $YN == "" ]] && exit
    read -e -p "Specific commit message (1 line)? " commit_message
fi

cd $repo_path
git add .
git commit -m "[$markdown_file] $commit_message"
git push
