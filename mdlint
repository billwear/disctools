#!/usr/bin/python3

#imports
import sys,re,glob;

#regexes
anchor_re = re.compile('\[[^\]]*\]\(#heading--[^\)]*\)')
doclink_re = re.compile('\[[^\]]*\]\(/t/[^\)]*\)')
doclink_shorthand_re = re.compile('\[[^\]]*\]\(/t/-/[^\)]*\)')
doclink_html_title_re = re.compile('\[[^\]]*\]\(/t/([^/]*)[^\)]*\)')
doclink_topic_re = re.compile('\[[^\]]*\]\(/t/[^/]*/([0-9]*)[^\)]*\)')
ref_topics_re = re.compile('/t/[^/]*/([0-9]*)')
extlink_re = re.compile('\[[^\]]*\]\(http[^\)]*\)')
html_heading_re = re.compile('<a href="[^"]*"><h[0-9].*')
md_heading_re = re.compile('##[#]*.*')
version_re = re.compile('v[0-9].[0-9] [a-zA-Z]*')
heading_id_re = re.compile('id="([^"]*)"')
anchor_id_re = re.compile('\(#(heading--[^)]*)\)')
heading_href_re = re.compile('href="#(heading--[^"]*)"')

# globals
messages = []
versions_reqd = ["v3.4 Snap","v3.4 Packages","v3.3 Snap","v3.3 Packages","v3.2 Snap","v3.2 Packages","v3.1 Snap","v3.1 Packages","v3.0 Snap","v3.0 Packages","v2.9 Snap","v2.9 Packages"]

#validate command line args
if len(sys.argv) != 2:
    print("usage: mdlint markdown-filename")
    exit(1)

#read in the markdown file
f = open(sys.argv[1])
buffer = f.read()

#parse important markdown elements to check
anchors = anchor_re.findall(buffer)
doclinks = doclink_re.findall(buffer)
doclinks_shorthand = doclink_shorthand_re.findall(buffer)
ref_topics = list(dict.fromkeys(ref_topics_re.findall(buffer)))
extlinks = extlink_re.findall(buffer)
html_headings = html_heading_re.findall(buffer)
md_headings = md_heading_re.findall(buffer)
versions_listed = list(dict.fromkeys(version_re.findall(buffer)))
anchor_ids = list(dict.fromkeys(anchor_id_re.findall(buffer)))
heading_ids = list(dict.fromkeys(heading_id_re.findall(buffer)))
heading_hrefs = heading_href_re.findall(buffer)

#make sure all internal anchors are actually in the document
for i in anchor_ids:
    if heading_ids.count(i) < 1:
        print("> anchor",i,"has no target")

#make sure all href heading ids match heading ids
for i in heading_hrefs:
    if heading_ids.count(i) < 1:
        print("> heading href",i,"doesn't match the heading id")
        
#make sure all topics correspond to an existing file
for i in ref_topics:
    if len(glob.glob("*"+i+".md")) == 0:
        print("> doc references topic number",i,"not found in fileset")

#make sure all current versions are listed in tabs, if there are any tabs
if len(versions_listed) != 0:
    for i in versions_reqd:
        if versions_listed.count(i) < 1:
            print("> version",i,"is not represented in tabs")

#warn about any markdown ("###") headings
if len(md_headings) != 0:
    for i in md_headings:
        print("> file has non-anchored heading",i)

#make sure all docset links contain a title, not just a "-" (shorthand link)
if len(doclinks_shorthand) != 0:
    for i in doclinks_shorthand:
        print("> docset link",i,"has no HTML title")

#make sure all docset links match the corresponding filename in the repo
for i in doclinks:
    doclink_html_title = doclink_html_title_re.findall(i)
    doclink_topic = doclink_topic_re.findall(i)
    filename = doclink_html_title[0] + "-" + doclink_topic[0] + ".md"
    if len(glob.glob(filename)) == 0:
        print("> doc reference",i,"does not match relevant filename")
